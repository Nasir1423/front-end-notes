/* 
    流式读取：与流式写入类似，我们需要先创建一个读取流对象，然后可以通过这个读取流对象读取数据，直到读我们关闭该读取流对象
        1. 创建读取流对象 fs.createReadStream(file[, options])
            - 参数
                - file 文件路径
                - options 选项配置（可选）
            - 返回值
                - Object 读取流对象
        2. 关闭读取流对象（rs 表示一个读取流对象） rs.on('end', callback) 
            - 这行代码是一个事件监听器，为读取流的 end 事件绑定响应函数，该事件在读取流读取到末尾时触发，即一旦所有数据都被读取，
            则该事件就会被触发，当事件触发后，就会执行对应的回调函数（end 事件触发后读取流会自动关闭）
        3. 通过读取流对象读取数据 rs.on('data', callback)
            - 这行代码是一个事件监听器，为读取流的 data 事件绑定响应函数，每当读取流接受到一个新的数据块时，data 事件就会被触发，
            当事件触发后，就会执行对应的回调函数（data 时间可能会多次触发）
            - 回调函数 callback 接收一个参数 chunk，表示一个接受到的数据块，当 data 事件触发时，读取流接受到的一个新的数据块，
            调用该回调函数，将接受到的数据块作为实参传递给 chunk，chunk 是一个 Buffer 对象
            - 通过监听 data 事件，我们可以实时获取从读取流中接受到的数据，并在每次接收到数据时进行相应的处理
        4. 流式写入 Vs. 流式读取
            - 流式写入的实现需要创建写入流对象；流式读取的实现需要创建读取流对象
            - 写入直接通过写入流对象的 write 方法实现；但是读取则需要监听读取流对象的 data 事件，给其绑定一个响应函数，读取流从目
            标文件一块块地读取数据，每读取一块数据，则会触发一次 data 事件，同时将读取的数据作为响应函数的参数传入
            - 关闭写入流对象可以直接通过写入流对象的 end 方法实现；但是关闭读取流对象则需要监听读取流对象的 end 事件，并给其绑
            定一个响应函数，当读取流从目标文件中读取完全部数据后，会触发 end 事件，并执行对应的的响应函数
*/

// 1. 导入 fs 模块
const fs = require('fs');

// 2. 创建读取流对象
const rs = fs.createReadStream('./FSData/1316538.png');

// 3. 通过流读入（一块一块地读取）
// 每次读取一块固定大小的数据，然后触发 data 事件，执行事件的回调函数
rs.on('data', chunk => {
    console.log(chunk.length); // 65536，表示每块数据的大小为 64KB
})

// 4. 关闭读取流对象
// 其实当读取流读取完数据之后就会自动关闭，我们这里做的是，监听读取流对象的结束事件，并执行相关操作
rs.on('end', ()=>{
    console.log("文件流式读取完毕");
})