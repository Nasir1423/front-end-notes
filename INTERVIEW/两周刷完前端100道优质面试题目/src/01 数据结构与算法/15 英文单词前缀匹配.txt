/**
 * @description 假设有一个英文单词库（是一个数组），里面有几十万英文单词。现要求如何输入一个字符串，快速判断其是不是某一个单词的前缀。
 */

/* 问题实现 */
/* 常规思路：遍历单词库数组 -> 对每个单词使用 indexOf 判断输入的字符串是不是对应单词的前缀。
不足之处：由于要考虑 indexOf 的计算量，该解决方式的时间复杂度超过 O(n)，n 表示英文单词库的规模。 */
/* 优化思路：考虑优化原始的数据结构，使用哈希表（对象）存储单词，如英文字母 26 个，可以提前将单词拆分为 26 个子库。
以此类推，每一层都可以拆分为 26 个，... 最后可以将单词库拆分成一棵树的形式，也就是哈希表。
此时可以通过哈希表的 key 快速查询对应单词。如对于输入字符串 happ，可以通过 dict.h.a.p.p 来查询其所匹配的单词。
优化之处：转换数据结构后，以空间换时间，该解决方式的时间复杂度为 O(m)，m 表示输入字符串的长度，显然 m << n */